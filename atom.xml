<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cour</title>
  
  <subtitle>blog</subtitle>
  <link href="http://ruanrong.run/atom.xml" rel="self"/>
  
  <link href="http://ruanrong.run/"/>
  <updated>2025-02-12T05:45:05.322Z</updated>
  <id>http://ruanrong.run/</id>
  
  <author>
    <name>cour</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简单指针</title>
    <link href="http://ruanrong.run/2025/02/12/01%20%E7%AE%80%E5%8D%95%E6%8C%87%E9%92%88/"/>
    <id>http://ruanrong.run/2025/02/12/01%20%E7%AE%80%E5%8D%95%E6%8C%87%E9%92%88/</id>
    <published>2025-02-12T05:45:05.322Z</published>
    <updated>2025-02-12T05:45:05.322Z</updated>
    
    <content type="html"><![CDATA[<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>8、指针 指针全称是指针变量，其实质是 C 语言的一种变量。这种变量比较特殊，通常它的值会被 赋值为某个变量的地址值（p &#x3D; &amp;a），然后我们可以使用*p<br>这样的方式去间接访问 p 所 指向的那个变量。 8.1、为什么需要指针？ 指针存在的目的就是间接访问。有了指针之后，我们访问变量 a 不必只通过 a 这个<br>变量名来 访问。而可以通过 p &#x3D; &a; <em>p &#x3D; xxx;这样的方式来间接访问变量 a。 8.2、两种重要运算符：&amp;和</em> &amp;：取地址符，将它加在某个变量前面，则组合<br>后的符号代表这个变量的地址值。例如： int a; int *p; p &#x3D; &a; 则将变量 a 的地址值赋值给 p。就在上面的例子中，有以下一些符号： a 代表变量 a 本<br>身 p 代表指针变量 p 本身 &amp;a 代表变量 a 的地址值 *p 代表指针变量 p 所指向的那个变量，也就是变量 a &amp;p 代表指针变量 p 本身的地址值。符号合法，<br>但对题目无意义 *a 把 a 看作一个指针，*a 表示这个指针所指向的变量。该符号不合法</p><p><em>：指针符号。指针符号在指针定义和指针操作的时候，解析方法是不同的。 int <em>p; 定义指针变量 p，这里的</em>p 含义不是代表指针变量 p 所指向的那个变量<br>，在定义时这里的</em>含义是告诉编译器 p 是一个指针。 int p; &#x2F;&#x2F; p 是一个整形变量 int <em>p; &#x2F;&#x2F; p 是一个指针变量，该指针指向一个整形数使用指针的时候<br>，</em>p 则代表指针变量 p 所指向的那个变量。</p><p>8.3、指针的定义和初始化指针既然是一种变量，那么肯定也可以定义，也可以初始化第一种：先定义再赋值 int *p; &#x2F;&#x2F; 定义指针变量 p p &#x3D; &a; &#x2F;&#x2F; 给 p 赋<br>值 第二种：定义的同时初始化 int *p &#x3D; &a; &#x2F;&#x2F; 效果等同于上面的两句</p><p>8.4、各种不同类型的指针指针变量本质上是一个变量，指针变量的类型属于指针类型。int *p;定义了一个指针类型的变量 p，这个 p 所指向的那个变量是<br>int 型。</p><p>int *pInt; &#x2F;&#x2F; pInt 是指针变量，指向的变量是 int 类型 char *pChar; &#x2F;&#x2F; pChar 是指针类型，指向的变量是 char 类型 float *pFloat; double<br>*pDouble; 各种指针类型和它们所指向的变量类型必须匹配，否则结果不可预知。</p><p>8.5、指针定义的两种理解方法： int _p; 第一种：首先看到 p，这个是变量名；其次，p 前面有个_，说明这个变量 p 是一个指针变量；最后，*p 前面有一<br>个 int，说明这个指针变量 p 所指向的是一个 int 型数据。</p><p>char <em>(</em>(_pfunc)[])(char _, char *) 类似的复杂表达式，可以用相同的分析方法得到</p><p>第二种：首先看到 p，这个是变量名；其次，看到 p 前面的 int *，把 int *作为一个整体来理解， int *是一种类型（复合类型），该类型表示一种指向<br>int 型数据的指针。</p><p>总结：第二种方法便于理解，但是不够本质；建议用第一种方法来理解，因为这种思维过程可以帮我们理解更复杂的表达式。</p><p>8.6、指针与数组的初步结合</p><p>数组名：做右值时，数组名表示数组的首元素首地址，因此可以直接赋值给指针。如果有 int a[5]; 则 a 和&amp;a[0]都表示数组首元素 a[0]的首地址。而&amp;a 则<br>表示数组的首地址。</p><p>注意：数组首元素的首地址和数组的首地址是不同的。前者是数组元素的地址，而后者是数组整体的地址。两个东西的含义不同，但是数值上是相同的。</p><p>根据以上，我们知道可以用一个指针指向数组的第一个元素，这样就可以用间接访问的方式去逐个访问数组中各个元素。这样访问数组就有了两种方式。有 int<br>a[5]; int <em>p; p &#x3D; a; 数组的方式依次访问：a[0] a[1] a[2] a[3] a[4] 指针的方式依次访问：</em>p _(p+1) _(p+2) _(p+3) _(p+4)</p><p>8.7、指针与++ –符号进行运算指针本身也是一种变量，因此也可以进行运算。但是因为指针变量本身存的是某个其他变量的地址值，因此该值进行* &#x2F; %等运<br>算是无意义的。两个指针变量相加本身也无意义，相减有意义。指针变量+1，-1 是有意义的。+1 就代表指针所指向的格子向后挪一格，-1 代表指针所指向的<br>格子向前挪一格。</p><p><em>p++就相当于</em>(p++)，p 先与++结合，然后 p++整体再与<em>结合。 <em>p++解析：++先跟 p 结合，但是因为++后置的时候，本身含义就是先运算后增加 1（运算指<br>的是 p++整体与前面的</em>进行运算；增加 1 指的是 p+1），所以实际上</em>p++符号整体对外表现的值是<em>p 的值，运算完成后 p 再加 1. 所以</em>p++等同于：*p; p<br>+&#x3D; 1;</p><p>*++p 等同于 p +&#x3D; 1; *p;</p><p>(<em>p)++，使用()强制将</em>与 p 结合，只能先计算<em>p，然后对</em>p 整体的值++。</p><p>++(<em>p)，先</em>p 取值，再前置++，该值+1 后作为整个表达式的值。</p><p>总结：++符号和指针结合，总共有以上 4 种情况。–与++的情况很类似。</p><p>8.8、函数传参中使用指针 int add(int a, int b) 函数传参使用了 int 型数，本身是数值类型。实际调用该函数时，实参将自己拷贝一份，并将拷贝传递给<br>形参进行运算。实参自己实际是不参与的。所以，在函数中，是没法改变实参本身的。</p><p>9、结构体、共用体、枚举、宏定义、预处理 9.1、结构体 9.1.1、为什么需要结构体？没有结构体之前，在 C 语言中，数据的组织依靠：变量+数组。最初最<br>简单的时候，只需要使用基本数据类型（int char float double）来定义单个变量，需要几个变量就定义几个。后来情况变复杂了，有时需要很多意义相关的<br>变量（譬如需要存储及运算一个班级的学生分数）这时候数组出现了。数组解决了需要很多类型相同、意义相关的变量的问题。但是数组是有限制的。数组最大<br>的不足在于，一个数组只能存储很多个数据类型相同的变量。所以碰到需要封装几个类型不同的变量的时候，数组就无能为力。譬如对于题目：使用一个数据结<br>构来保存一个学生的所有信息：姓名 学号 性别这时候就需要结构体。</p><p>9.2、什么是结构体？结构体是一个集合，集合中包含很多个元素，这些元素的数据类型可以相同，也可以不相同。所以结构体是一种数据封装的方法。结构体<br>存在的意义就在于，把很多数据类型不相同的变量封装在一起，组成一个大的新的数据类型。</p><p>数据结构：把庞大复杂的数据用一定的方式组织管理起来，便于操作（查找，增加，删除等）这就叫数据结构。</p><p>9.3、结构体和数组的关联：数组是一种特殊的结构体，特殊之处在于封装内的各个元素类型是相同的。结构体和数组都是对一些子元素的封装，因此定义的时<br>候都是封装作为整体定义，但是使用的时候，都是使用封装中的子元素。一般结构体变量和数组变量都不会作为一个整体操作。</p><p>9.4、使用结构体的步骤：第一步：定义结构体类型。结构体类型的定义是在函数外面（函数外面 &#x3D;&#x3D; 全局）的第二步：使用第一步定义的类型来定义结构体变<br>量。第三步：使用变量。实际上使用结构体变量的时候，使用的是结构体变量中封装的各个子元素，而不是结构体变量本身。</p><p>9.5、结构体的初始化结构体变量和普通变量一样，作为局部变量时，如果定义的时候无初始化也无显式赋值，则结构体变量中的子元素的值是随机的。</p><p>发现 2 种 C 语言接受的结构体初始化方式。第一种，完全初始化。{xx, xx, xx, xx, xx}; 第二种，部分初始化。 { .a &#x3D; xx, .b &#x3D; xx, .c &#x3D; xx, .d &#x3D; xx,<br>};</p><p>新增关键字： struct 新增操作符： .</p><p>9.6、宏定义 #define N 321 &#x2F;&#x2F;宏定义的格式宏定义要注意的问题： 1、宏定义一般是在函数的外面 2、宏定义必须要先定义，再使用宏。如果先使用就会编译<br>报错。 3、宏定义中宏名一般用大写。不是语法规定的，是一般约定俗成的。</p><p>为什么使用宏定义？在 C 语言中，一般使用常数的时候，都不是直接使用，而是先把该常数定义为一个宏，然后在程序中使用该宏名。这样做的好处是，等我<br>们需要修改这个常数时，只需要在宏定义处修改一次即可。而不用到代码中到处去寻找，看哪里都用过该常数。</p><p>9.7、枚举</p><p>9.6、共用体（union，联合，联合体） 9.6.1、共用体 union 在定义和使用形式上，和结构体 struct 很相似。但是两种数据结构是完全不同的两类东西。结<br>构体，是对多个数据的组合与封装。共用体，共用体中只有一个东西，只是它被好几个名字（和类型）共用。</p><p>char -128 ~ 127 int -xxxx ~ + xxxx</p><p>新增关键字：union</p><p>1、数据类型 1.1、基本数据类型数据类型分 2 类：基本数据类型+复合类型基本类型：char short int long float double 复合类型：数组 结构体 共用体类<br>（C 语言没有类，C++有）</p><p>1.1.1、内存占用与 sizeof 运算符数据类型就好像一个一个的模子，这个模子实例化出 C 语言的变量。变量存储在内存中，需要占用一定的内存空间。一个变<br>量占用多少空间是由变量的数据类型决定的。每种数据类型，在不同的机器平台上占用内存是不同的。我们一般讲的时候都是以 32 位 CPU 为默认硬件平台来<br>描述： char 1 字节 8 位 short 2 字节 16 位 int 4 字节 32 位 long 4 字节 32 位 float 4 字节 double 8 字节</p><p>1.1.2、有符号数和无符号数对于 char short int long 等整形类型的数，都分有符号有无符号数。而对于 float 和 double 这种浮点型数来说，只有有符号<br>数，没有无符号数。</p><p>对于 C 语言来说，数（也就是变量）是存储在内存中一个一个的格子中的。存储的时候是以二进制方式存储的。对于有符号数和无符号数来说，存储方式不同<br>的。譬如对于 int 来说 unsigned int 无符号数，32 位(4 字节)全部用来存数的内容 所以表示的数的范围是 0 ~ 4294967295(2^32 - 1) signed int 有符号<br>数，32 位中最高位用来存符号（0 表示正数，1 表示负数），剩余的 31 位用来存数据。所以可以表示的数的范围是 -2147483648(2^32) ~<br>2147483647(2^31 - 1)</p><p>结论：从绝对数值来说，无符号数所表示的范围要大一些。因为有符号数使用 1 个二进制位来表示正负号。</p><p>1.1.3、整形数和浮点型数存储方式上的不同对于 float 和 double 这种浮点类型的数，它在内存中的存储方式和整形数不一样。所以 float 和 int 相比，虽<br>然都是 4 字节，但是在内存中存储的方式完全不同。所以同一个 4 字节的内存，如果存储时是按照 int 存放的，取的时候一定要按照 int 型方式去取。如果<br>存的时候和取的时候理解的方式不同，那数据就完全错了。</p><p>备注：详细的数制存储可以查找资料：计算机原码、反码、补码等知识。</p><p>总结：存取方式上主要有两种，一种是整形一种是浮点型，这两种存取方式完全不同，没有任何关联，所以是绝对不能随意改变一个变量的存取方式。在整形和<br>浮点型之内，譬如说 4 种整形 char、short、int、long 只是范围大小不同而已，存储方式是一模一样的。float 和 double 存储原理是相同的，方式上有差<br>异，导致了能表示的浮点型的范围和精度不同。</p><p>1.2、空类型（关键字 void） C 语言中的 void 类型，代表任意类型，而不是空的意思。任意类型的意思不是说想变成谁就变成谁，而是说它的类型是未知的<br>，是还没指定的。 void * 是 void 类型的指针。void 类型的指针的含义是：这是一个指针变量，该指针指向一个 void 类型的数。void 类型的数就是说这<br>个数有可能是 int，也有可能是 float，也有可能是个结构体，哪种类型都有可能，只是我当前不知道。</p><p>void 型指针的作用就是，程序不知道那个变量的类型，但是程序员自己心里知道。程序员如何知道？当时给这个变量赋值的时候是什么类型，现在取的时候就<br>还是什么类型。这些类型对不对，能否兼容，完全由程序员自己负责。编译器看到 void 就没办法帮你做类型检查了。</p><p>在函数的参数列表和返回值中，void 代表的含义是：一个函数形参列表为 void，表示这个函数调用时不需要给它传参。返回值类型是 void，表示这个函数不<br>会返回一个有意义的返回值。所以调用者也不要想着去使用该返回值。</p><p>C 语言设计基本理念： C 语言相信程序员永远是对的，C 语言相信程序员都是高手，C 语言赋予了程序员最大的权利。所以 C 语言的程序员必须自己对程序的<br>对错负责，必须随时脑袋清楚，知道自己在干嘛。</p><p>1.3、数据类型转换 C 语言中有各种数据类型，写程序时需要定义各种类型的变量。这些变量需要参与运算。C 语言有一个基本要求就是：不同类型的变量是不<br>能直接运算的。也就是说，int 和 float 类型的变量不能直接加减等运算。你要运算，必须先把两种类型转成相同的类型才可以。</p><p>1.3.1、隐式转换隐式转换就是自动转换，是 C 语言默认会进行的，不用程序员干涉。 C 语言的理念：隐式类型转换默认朝精度更高、范围更大的方向转换。</p><p>1.3.2、强制类型转换 C 语言默认不会这么做，但是程序员我想这么做，所以我强制这么做了。</p><p>1.4、C 语言与 bool 类型 C 语言中原生类型没有 bool，C++中有。在 C 语言中如果需要使用 bool 类型，可以用 int 来代替。很多代码体系中，用以下宏定<br>义来定义真和假 #define TRUE 1 #define FALSE 0</p><p>2、变量和常量 2.1、变量变量，指的是在程序运行过程中，可以通过代码使它的值改变的量。 2.1.1、局部变量定义在函数中的变量，就叫局部变量。<br>2.1.1.1、普通局部变量(auto) 普通的局部变量定义时直接定义，或者在定义前加 auto 关键字</p><p>void func1(void) { int i &#x3D; 1; i++; printf(“i &#x3D; %d.\n”, i); } 局部变量 i 的解析：在连续三次调用 func1 中，每次调用时，在进入函数 func1 后都会<br>创造一个新的变量 i，并且给它赋初值 1，然后 i++时加到 2，然后 printf 输出时输出 2.然后 func1 本次调用结束，结束时同时杀死本次创造的这个 i。这<br>就是局部变量 i 的整个生命周期。下次再调用该函数 func1 时，又会重新创造一个 i，经历整个程序运算，最终在函数运行完退出时再次被杀死。</p><p>2.1.1.2、静态局部变量(static) 静态局部变量定义时前面加 static 关键字。</p><p>总结： 1、静态局部变量和普通局部变量不同。静态局部变量也是定义在函数内部的，静态局部变量定义时前面要加 static 关键字来标识，静态局部变量所在<br>的函数在多调用多次时，只有第一次才经历变量定义和初始化，以后多次在调用时不再定义和初始化，而是维持之前上一次调用时执行后这个变量的值。本次接<br>着来使用。 2、静态局部变量在第一次函数被调用时创造并初始化，但在函数退出时它不死亡，而是保持其值等待函数下一次被调用。下次调用时不再重新创造<br>和初始化该变量，而是直接用上一次留下的值为基础来进行操作。 3、静态局部变量的这种特性，和全局变量非常类似。它们的相同点是都创造和初始化一次，<br>以后调用时值保持上次的不变。不同点在于作用域不同</p><p>2.1.1.4、register 关键字 register(寄存器),C 语言的一个关键字 register int i &#x3D; 3;</p><p>总结：register 类型的局部变量表现上和 auto 是一样的，这东西基本没用，知道就可以了。register 被称为：C 语言中最快的变量。C 语言的运行时环境承<br>诺，会尽量将 register 类型的变量放到寄存器中去运行（普通的变量是在内存中），所以 register 类型的变量访问速度会快很多。但是它是有限制的：首先<br>寄存器数目是有限的，所以 register 类型的变量不能太多；其次 register 类型变量在数据类型上有限制，譬如你就不能定义 double 类型的 register 变量<br>。一般只在内核或者启动代码中，需要反复使用同一个变量这种情况下才会使用 register 类型变量。</p><p>2.1.2、全局变量定义在函数外面的变量，就叫全局变量。 2.1.2.1、普通全局变量 普通全局变量就是平时使用的，定义前不加任何修饰词。普通全局变量可以<br>在各个文件中使用，可以在项目内别的.c 文件中被看到，所以要确保不能重名。 2.1.2.2、静态全局变量 静态全局变量就是用来解决重名问题的。静态全局变<br>量定义时在定义前加 static 关键字，告诉编译器这个变量只在当前本文件内使用，在别的文件中绝对不会使用。这样就不用担心重名问题。所以静态的全局变<br>量就用在我定义这个全局变量并不是为了给别的文件使用，本来就是给我这个文件自己使用的。</p><p>2.1.1.3、跨文件引用全局变量(extern) 就是说，你在一个程序的多个.c 源文件中，可以在一个.c 文件中定义全局变量 g_a,并且可以在别的另一个.c 文件中<br>引用该变量 g_a（引用前要声明）</p><p>函数和全局变量在 C 语言中可以跨文件引用，也就是说他们的连接范围是全局的，具有文件连接属性，总之意思就是全局变量和函数是可以跨文件看到的（直<br>接影响就是，我在 a.c 和 b.c 中各自定义了一个函数 func，名字相同但是内容不同，编译报错。）。</p><p>局部变量和全局变量的对比： 1、定义同时没有初始化，则局部变量的值是随机的，而全局变量的值是默认为 0. 2、使用范围上：全局变量具有文件作用域，<br>而局部变量只有代码块作用域。 3、生命周期上：全局变量是在程序开始运行之前的初始化阶段就诞生，到整个程序结束退出的时候才死亡；而局部变量在进入<br>局部变量所在的代码块时诞生，在该代码块退出的时候死亡。 4、变量分配位置：全局变量分配在数据段上，而局部变量分配在栈上。</p><p>判断一个变量能不能使用，有没有定义，必须注意两点：第一，该变量定义的作用域是否在当前有效，是否包含当前位置；第二，变量必须先定义后使用。所以<br>变量引用一定要在变量定义之前</p><p>基本概念：作用域：起作用的区域，也就是可以工作的范围。代码块：所谓代码块，就是用{}括起来的一段代码。数据段：数据段存的是数，像全局变量就是存<br>在数据段的代码段：存的是程序代码，一般是只读的。栈(stack)：先进后出。C 语言中局部变量就分配在栈中。</p><p>C 语言对内存的管理方式。</p><p>2.2、常量常量，程序运行过程中不会改变的量。常量的值在程序运行之前初始化的时候给定一次，以后都不会变了，以后一直是这个值。 2.2.1、#define 定<br>义的常量 #define N 20 &#x2F;&#x2F; 符号常量 int a[N]; 2.2.2、const 关键字 const int i &#x3D; 14 const 和指针结合，共有 4 种形式 const int *p; p 是一个指针<br>，指针指向一个 int 型数据。p 所指向的是个常量。 int const *p; p 是一个指针，指针指向一个 int 型数据。p 所指向的是个常量。 int *const p; p 是<br>一个指针，指针指向一个 int 型数据。p 本身是常量，p 所指向的是个变量 const int *const p; p 是一个指针，指针指向一个 int 型数据。p 本身是常量<br>，指向的也是常量</p><p>结论和记忆方法： 1、const 在<em>前面，就表示 const 作用于 p 所指向的量。所以这时候 p 所指向的是个常量。 2、const 在</em>后面，表示 p 本身是常量，但<br>是 p 指向的不一定是常量。</p><p>const 型指针有什么用？ char *strcpy(char *dst, const char *src); 字符串处理函数 strcpy，它的函数功能是把 src 指向的字符串，拷贝到 dst 中。</p><p>2.2.3、枚举常量枚举常量是宏定义的一种替代品，在某些情况下会比宏定义好用。 enum</p><p>3、多文件 C 语言项目 3.1、简单的 C 语言程序（项目）只有一个 C 文件(a.c)，编译的时候 gcc a.c -o a，执行的时候.&#x2F;a 3.2、复杂的 C 语言程序（项目<br>）是由多个 C 文件构成的。譬如一个项目中包含 2 个 c 文件（a.c, b.c），编译的时候 gcc a.c b.c -o ab，执行的时候 .&#x2F;ab</p><p>实验：在 a.c 和 b.c 中分别定义 main 函数，各自单独编译时没问题；但是两个文件作为一个项目来编译 gcc a.c b.c -o ab 的时候，就会报错。multiple<br>definition of &#96;main’ 为什么报错？因为 a.c 和 b.c 这时候组成了一个程序，而一个程序必须有且只能有一个 main 函数。</p><p>3.3、为什么需要多文件项目？为什么不在一个.c 文件中写完所有的功能？因为一个真正的 C 语言项目是很复杂的，包含很多个函数，写在一个文件中不利于<br>查找、组织、识别，所以人为的将复杂项目中的很多函数，分成了一个一个的功能模块，然后分开放在不同的.c 文件中，于是乎有了多文件项目。所以，在<br>b.c 中定义的一个函数，很可能 a.c 中就会需要调用。你在任何一个文件中定义的任何一个函数，都有可能被其他任何一个文件中的函数来调用。但是大家最<br>终都是被 main 函数调用的，有可能是直接调用，也可能是间接调用。</p><p>3.4、多文件项目中，跨文件调用函数在调用函数前，要先声明该被调用函数的原型。只要在调用前声明了该函数，那么调用时就好像这个函数是定义在本文件<br>中的函数一样。</p><p>总结：函数使用的三大要素：函数定义、函数声明、函数调用 1、如果没有定义，只有声明和调用：编译时会报连接错误。undefined reference to<br>&#96;func_in_a’ 2、如果没有声明，只有定义和调用：编译时一般会报警告，极少数情况下不会报警告。但是最好加上声明。 3、如果没有调用，只有定义和声明<br>：编译时一般会报警告（有一个函数没有使用），有时不会报警告。这时候程序执行不会出错，只是你白白的写了几个函数，而没有使用浪费掉了而已。</p><p>实验：在一个项目的两个.c 文件中，分别定义一个名字相同的函数，结果？编译报错 multiple definition of &#96;func_in_a’ 结论：在一个程序中，不管是一<br>个文件内，还是该程序的多个文件内，都不能出现函数名重复的情况，一旦重复，编译器就会报错。主要是因为编译器不知道你调用该函数时到底调用的是哪个<br>函数，编译器在调用函数时是根据函数名来识别不同的函数的。</p><p>3.5、跨文件的变量引用 (1)通过实验验证得出结论：在 a.c 中定义的全局变量，在 a.c 中可以使用，在 b.c 中不可以直接使用，编译时报错 error: ‘g_a’<br>undeclared (first use in this function) (2)想在 b.c 中使用 a.c 中定义的全局变量，有一个间接的使用方式。在 a.c 中写一个函数，然后函数中使用<br>a.c 中定义的该全局变量，然后在 b.c 中先声明函数，再使用函数。即可达到在 b.c 中间接引用 a.c 中变量的目的。 (3)想在 b.c 中直接引用 a.c 中定义<br>的全局变量 g_a，则必须在 b.c 中引用前先声明 g_a，如何声明变量？ extern int g_a;</p><p>extern 关键字： extern int g_a; 这句话是一个全局变量 g_a 的声明，这句话告诉编译器，我在外部（程序中不是本文件的另一个文件）某个地方定义了一<br>个全局变量 int g_a，而且我现在要在这里引用它告诉你编译器一声，不用报错了。</p><p>问题： 1、我只在 b.c 中声明变量，但是别的文件中根本就定义这个变量，会怎么样？答案是编译报错（连接错误）undefined reference to &#96;g_b’ 2、我在<br>a.c 中定义了全局变量 g_a，但是 b.c 中没有声明 g_a，引用该变量会怎么样？答案是直接抱错了，未定义 3、在 a.c 中定义，在 b.c 中声明，a.c 和 b.c<br>中都没有引用该变量，会怎么样？答案是不会出错。只是白白的定义了一个变量没用，浪费了</p><p>结论：不管是函数还是变量，都有定义、声明、引用三要素。其中，定义是创造这个变量或者函数，声明是向编译器交代它的原型，引用是使用这个变量或函数<br>。所以如果没有定义只有声明和引用，编译时一定会报错。undefined reference to &#96;xxx’</p><p>在一个程序里面，一个函数可以定义一次，引用可以有无数次，声明可以有无数次。因为函数定义或者变量的定义实际上是创造了这个函数&#x2F;变量，所以只能有<br>一次。（多次创造同名的变量会造成变量名重复，冲突；多次创造同名的函数也会造成函数名重名冲突）。声明是告诉编译器变量&#x2F;函数的原型，在每个引用了<br>这个全局变量&#x2F;函数的文件之前都要声明该变量&#x2F;函数</p><p>局部变量能不能跨文件使用？不能。因为局部变量属于代码块作用域。他的作用域只有他定义的那个函数内部。</p><p>静态局部变量能不能跨文件使用？不能。因为本质上还是个局部变量。</p><p>讨论跨文件使用问题，只用讨论全局变量和函数就可以了。</p><p>3.6、头文件的引入 3.6.1、为什么需要头文件？从之前可以看到，函数的声明是很重要的。当我们在一个庞大的项目中，有很多个源文件，每一个源文件中都<br>有很多个函数，并且需要在各个文件中相互穿插引用函数。怎么解决函数的声明问题？靠头文件。</p><p>3.6.2、#include 包含头文件时，用&lt;&gt;和””的区别 &lt;&gt;用来包含系统自带的头文件，系统自带指的是不是你写的，是编译器或者库函数或者操作系统提供的头文<br>件。 “”用来包含项目目录中的头文件，这些一般是我们自己写的。</p><p>3.6.3、防止重复包含头文件 #ifndef <strong>A_H</strong> #define <strong>A_H</strong> &#x2F;&#x2F; C 语言头文件中的声明 #endif</p><p>3.6.4、写程序时，最好不要在头文件中定义变量。因为这时该头文件被多个源文件包含时，就会出现重复定义问题。全局变量的定义就应该放在某个源文件中<br>，然后在别的源文件中使用前是 extern 声明。</p><p>运算符 逻辑运算符： &amp;&amp; || ! 位运算符：&amp; | ~ ^ 三目运算符: ? : 结构体元素访问： . -&gt; 命令行参数 argc 与 argv</p><p>C 语言中判断式 各种数据类型和 0 比较 整形和 0 比较 浮点型和 0 比较 bool 类型与 0 比较 指针类型和 0 比较（NULL） NULL 和’\0’的区别 大端模式和<br>小端模式</p><p>字符和字符串 ASCII 编码 转义字符 字符串 字符数组 数组</p><p>指针 函数 递归函数 函数中使用断言 使用 const 提高函数的健壮性</p><pre><code>使用库函数    字符串处理函数    数学函数    其他库函数</code></pre><p>C 语言预处理：宏定义#define typedef 重定义类型名 #if #elif #endif #ifdef #endif</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;指针&quot;&gt;&lt;a href=&quot;#指针&quot; class=&quot;headerlink&quot; title=&quot;指针&quot;&gt;&lt;/a&gt;指针&lt;/h2&gt;&lt;p&gt;8、指针 指针全称是指针变量，其实质是 C 语言的一种变量。这种变量比较特殊，通常它的值会被 赋值为某个变量的地址值（p &amp;#x3D; &amp;a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World23432</title>
    <link href="http://ruanrong.run/2025/02/12/hello-world%20copy%205/"/>
    <id>http://ruanrong.run/2025/02/12/hello-world%20copy%205/</id>
    <published>2025-02-12T05:32:58.069Z</published>
    <updated>2025-02-12T05:32:58.069Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get<br>any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on<br><a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World32432</title>
    <link href="http://ruanrong.run/2025/02/12/hello-world%20copy%204/"/>
    <id>http://ruanrong.run/2025/02/12/hello-world%20copy%204/</id>
    <published>2025-02-12T05:32:57.929Z</published>
    <updated>2025-02-12T05:32:57.929Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get<br>any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on<br><a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World213</title>
    <link href="http://ruanrong.run/2025/02/12/hello-world%20copy%203/"/>
    <id>http://ruanrong.run/2025/02/12/hello-world%20copy%203/</id>
    <published>2025-02-12T05:32:57.754Z</published>
    <updated>2025-02-12T05:32:57.754Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get<br>any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on<br><a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World1</title>
    <link href="http://ruanrong.run/2025/02/12/hello-world%20copy%202/"/>
    <id>http://ruanrong.run/2025/02/12/hello-world%20copy%202/</id>
    <published>2025-02-12T05:32:57.578Z</published>
    <updated>2025-02-12T05:32:57.578Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get<br>any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on<br><a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World5235324</title>
    <link href="http://ruanrong.run/2025/02/12/hello-world%20copy/"/>
    <id>http://ruanrong.run/2025/02/12/hello-world%20copy/</id>
    <published>2025-02-12T05:32:57.347Z</published>
    <updated>2025-02-12T05:32:57.347Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get<br>any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on<br><a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://ruanrong.run/2025/02/12/hello-world/"/>
    <id>http://ruanrong.run/2025/02/12/hello-world/</id>
    <published>2025-02-12T05:19:07.057Z</published>
    <updated>2025-02-12T05:19:07.057Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get<br>any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on<br><a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p><img src="/images/post/defaults/defaults_cover_1.jpg"></p><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
