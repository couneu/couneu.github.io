<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript 预编译</title>
      <link href="/couneu/web/JavaScript/21_precompile/"/>
      <url>/couneu/web/JavaScript/21_precompile/</url>
      
        <content type="html"><![CDATA[<blockquote><p>速记：变量声明提升，函数整体提升</p></blockquote><h2 id="全局预编译（GO-生成）"><a href="#全局预编译（GO-生成）" class="headerlink" title="全局预编译（GO 生成）"></a>全局预编译（GO 生成）</h2><ol><li>创建全局对象(GO): 浏览器环境中，GO 即 <code>window</code> 对象，所有全局变量和函数最终挂载到 GO 上。</li><li>变量声明提升: 将 <code>var</code> 声明的变量提升至作用域顶部，初始值为 <code>undefined</code>。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">20</span>; <span class="comment">// 合并声明，覆盖初始值</span></span><br></pre></td></tr></table></figure></li><li>函数声明提升: 将函数声明（非表达式）提升至作用域顶部，函数名若与变量名冲突，<strong>函数优先覆盖变量</strong>。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo); <span class="comment">// ƒ foo() &#123;&#125;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li><li>执行代码: 预编译结束开始执行代码， 变量赋值、函数表达式等操作在此阶段进行。</li></ol><h2 id="函数预编译（AO-生成）"><a href="#函数预编译（AO-生成）" class="headerlink" title="函数预编译（AO 生成）"></a>函数预编译（AO 生成）</h2><ol><li><p>创建 AO 对象： AO 用于存储函数内部的变量、参数和函数声明。</p></li><li><p>处理形参和变量声明： 将形参与 <code>var</code> 声明的变量加入 AO，值为 <code>undefined</code>（形参与变量名冲突时，<strong>形参保留初始值</strong>）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> a; <span class="comment">// 形参已存在，声明被忽略</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1（由实参赋值）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li><p>实参赋值给形参： 将实参与形参一一绑定，未传递的实参保持 <code>undefined</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b); <span class="comment">// 1, undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li><p>处理函数声明： 函数声明提升至 AO 顶部，若与变量或形参同名，<strong>函数声明覆盖前者</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// ƒ a() &#123;&#125;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li><p>执行函数体： 预编译完成后，按代码顺序执行，变量赋值、表达式求值在此阶段完成。</p></li></ol><hr><h2 id="作用域链与生命周期"><a href="#作用域链与生命周期" class="headerlink" title="作用域链与生命周期"></a>作用域链与生命周期</h2><ul><li>GO 始终在作用域链末端，函数执行时 AO 位于前端，形成链式查找。</li><li>AO 随函数调用创建、执行完毕销毁，每次调用产生独立 AO，闭包会延长变量生命周期。</li><li>未声明直接赋值的变量（非严格模式）自动成为全局变量，挂载到 GO。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">accidentalGlobal = <span class="number">10</span>; <span class="comment">// 等价于 window.accidentalGlobal = 10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(accidentalGlobal); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="示例分析"><a href="#示例分析" class="headerlink" title="示例分析"></a>示例分析</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">y</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(z); <span class="comment">// undefined（变量提升）</span></span><br><span class="line"><span class="keyword">var</span> z = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">y</span>(<span class="params"></span>) &#123;&#125; <span class="comment">// 覆盖形参 y</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y, z); <span class="comment">// ƒ y() &#123;&#125;, 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><ol><li><p>全局预编译</p><ul><li>变量 <code>x</code> 提升，值为 <code>undefined</code>。</li><li>函数 <code>foo</code> 提升，覆盖同名变量（如有）。</li><li>执行代码，<code>x</code> 赋值为 1。</li></ul></li><li><p>调用 <code>foo(3)</code> 时的 AO</p><ul><li>形参 <code>y</code> 初始化为 3，后因函数声明 <code>function y() &#123;&#125;</code> 被覆盖为函数体。</li><li>变量 <code>z</code> 提升，值为 <code>undefined</code>，执行到赋值语句后变为 2。</li></ul></li></ol><hr><h3 id="关键区别总结"><a href="#关键区别总结" class="headerlink" title="关键区别总结"></a>关键区别总结</h3><table><thead><tr><th>特征</th><th>全局预编译（GO）</th><th>函数预编译（AO）</th></tr></thead><tbody><tr><td>触发时机</td><td>脚本加载时</td><td>函数调用时</td></tr><tr><td>作用域链位置</td><td>最外层（始终存在）</td><td>函数执行时前端（临时）</td></tr><tr><td>变量处理顺序</td><td>变量 → 函数声明</td><td>形参&#x2F;变量 → 函数声明</td></tr><tr><td>同名覆盖逻辑</td><td>函数声明覆盖变量</td><td>函数声明覆盖形参&#x2F;变量</td></tr><tr><td>生命周期</td><td>持久（除非页面关闭）</td><td>临时（函数执行完毕销毁）</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 方法</title>
      <link href="/couneu/web/css/02_css_function/"/>
      <url>/couneu/web/css/02_css_function/</url>
      
        <content type="html"><![CDATA[<h2 id="函数-function"><a href="#函数-function" class="headerlink" title="函数 (function)"></a>函数 (function)</h2><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>attr</td><td>返回所选元素的属性值。</td></tr><tr><td>calc</td><td>允许您执行计算来确定 CSS 属性值。</td></tr><tr><td>cubic-bezier</td><td>定义三次贝塞尔曲线。</td></tr><tr><td>hsl</td><td>使用色相-饱和度-亮度模型（HSL）定义颜色。</td></tr><tr><td>hsla</td><td>使用色相-饱和度-亮度-阿尔法模型（HSLA）定义颜色。</td></tr><tr><td>linear-gradient</td><td>将线性渐变设置为背景图像。定义至少两种颜色（从上到下）。</td></tr><tr><td>radial-gradient</td><td>将径向渐变设置为背景图像。定义至少两种颜色（从中心到边缘）。</td></tr><tr><td>repeating-linear-gradient</td><td>重复线性渐变。</td></tr><tr><td>repeating-radial-gradient</td><td>重复径向渐变。</td></tr><tr><td>rgb</td><td>使用红-绿-蓝模型（RGB）定义颜色。</td></tr><tr><td>rgba</td><td>使用红-绿-蓝-阿尔法模型（RGB）定义颜色。</td></tr><tr><td>func_var</td><td>插入自定义属性的值。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FLEX 布局</title>
      <link href="/couneu/web/css/03_css_flex/"/>
      <url>/couneu/web/css/03_css_flex/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Flex(Flexible Box): 弹性布局</p></blockquote><p>注意: 设为 Flex 布局以后，子元素的 float​、clear​ 和 vertical-align​ 属性将失效。</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ul><li>容器：设置 display:flex;​ 的元素称为 Flex 容器， 简称容器</li><li>项目：容器中的所有子元素自动成为容器的成员，称为 Flex 项目（flex item），简称”项目”</li><li>容器轴<ul><li>水平的主轴（main axis）：主轴的开始位置（与边框的交叉点）叫做 main start​，结束位置叫做 main end​</li><li>垂直的交叉轴（cross axis）：交叉轴的开始位置叫做 cross start​，结束位置叫做 cross end​</li></ul></li></ul><blockquote><p>项目默认沿主轴排列。单个项目占据的主轴空间叫做 main size​，占据的交叉轴空间叫做 cross size​</p></blockquote><h1 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h1><h2 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h2><h4 id="​flex-direction​：主轴的方向"><a href="#​flex-direction​：主轴的方向" class="headerlink" title="​flex-direction​：主轴的方向"></a>​flex-direction​：主轴的方向</h4><ul><li>​row​（默认值）：主轴为水平方向，起点在左端。</li><li>​row-reverse​：主轴为水平方向，起点在右端。</li><li>​column​：主轴为垂直方向，起点在上沿。</li><li>​column-reverse​：主轴为垂直方向，起点在下沿。</li></ul><h4 id="​flex-wrap​-：-是否换行"><a href="#​flex-wrap​-：-是否换行" class="headerlink" title="​flex-wrap​ ： 是否换行"></a>​flex-wrap​ ： 是否换行</h4><ul><li>​nowrap​ （默认）：不换行。</li><li>​wrap​ ：换行，第一行在上方。</li><li>​wrap-reverse​：换行，第一行在下方。</li></ul><h4 id="​flex-flow​-：简写形式"><a href="#​flex-flow​-：简写形式" class="headerlink" title="​flex-flow​ ：简写形式"></a>​flex-flow​ ：简写形式</h4><blockquote><p>flex-direction​ 属性和 flex-wrap​ 属性的简写形式</p></blockquote><h4 id="​justify-content​：-项目在主轴上的对齐方式"><a href="#​justify-content​：-项目在主轴上的对齐方式" class="headerlink" title="​justify-content​： 项目在主轴上的对齐方式"></a>​justify-content​： 项目在主轴上的对齐方式</h4><ul><li>​flex-start​（默认值）：左对齐</li><li>​flex-end​：右对齐</li><li>​center​： 居中</li><li>​space-between​：两端对齐，项目之间的间隔都相等</li><li>​space-around​：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍</li><li>​space-evenly​: 平均分布</li></ul><h4 id="​align-items​：-项目在交叉轴上的对齐方式"><a href="#​align-items​：-项目在交叉轴上的对齐方式" class="headerlink" title="​align-items​： 项目在交叉轴上的对齐方式"></a>​align-items​： 项目在交叉轴上的对齐方式</h4><ul><li>​flex-start​：交叉轴的起点对齐</li><li>​flex-end​：交叉轴的终点对齐</li><li>​center​：交叉轴的中点对齐</li><li>​baseline​: 项目的第一行文字的基线对齐。</li><li>​stretch​（默认值）：如果项目未设置高度或设为 auto，将占满整个容器的高度。</li></ul><h4 id="​align-content​：多根轴线的对齐方式"><a href="#​align-content​：多根轴线的对齐方式" class="headerlink" title="​align-content​：多根轴线的对齐方式"></a>​align-content​：多根轴线的对齐方式</h4><ul><li>​flex-start​：与交叉轴的起点对齐。</li><li>​flex-end​：与交叉轴的终点对齐。</li><li>​center​：与交叉轴的中点对齐</li><li>​space-between​：与交叉轴两端对齐，第一项在起始行，最后一项在结束行,轴线之间的间隔平均分布</li><li>​space-around​：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li>​space-evenly​：项目分布使得任何两个项目之间的间距（以及边缘的空间）相等。</li><li>​stretch​（默认值）：轴线占满整个交叉轴。</li></ul><h2 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h2><h4 id="​order​：-排列顺序"><a href="#​order​：-排列顺序" class="headerlink" title="​order​： 排列顺序"></a>​order​： 排列顺序</h4><blockquote><p>项目的排列顺序，数值越小，排序越靠前，默认 0</p></blockquote><h4 id="​flex-grow​：放大比例"><a href="#​flex-grow​：放大比例" class="headerlink" title="​flex-grow​：放大比例"></a>​flex-grow​：放大比例</h4><blockquote><p>flex-grow 属性定义项目的放大比例，默认为 0，即如果存在剩余空间，也不放大。<br>flex-grown 属性定义了父元素在空间分配方向上剩余空闲时，如何分配剩余空间。</p></blockquote><blockquote><p>如果所有项目的 flex-grow 属性都为 1，则它们将等分剩余空间（如果有的话）。</p><p>如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。</p></blockquote><p>得到的大小 &#x3D; 剩余空间&#x2F;sum(grow) * self.grow</p><h4 id="​flex-shrink​：-缩小比例"><a href="#​flex-shrink​：-缩小比例" class="headerlink" title="​flex-shrink​： 缩小比例"></a>​flex-shrink​： 缩小比例</h4><blockquote><p>flex-shrink 属性定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。</p></blockquote><h4 id="​flex-basis​-：项目初始化大小"><a href="#​flex-basis​-：项目初始化大小" class="headerlink" title="​flex-basis​ ：项目初始化大小"></a>​flex-basis​ ：项目初始化大小</h4><blockquote><p>flex-basis 属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。</p></blockquote><ul><li>​auto​：默认值，项目原本大小</li></ul><h4 id="​flex​：复合属性"><a href="#​flex​：复合属性" class="headerlink" title="​flex​：复合属性"></a>​flex​：复合属性</h4><blockquote><p>flex 属性是 flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto。后两个属性可选。</p></blockquote><blockquote><p>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</p></blockquote><h4 id="​align-self​：对齐方式"><a href="#​align-self​：对齐方式" class="headerlink" title="​align-self​：对齐方式"></a>​align-self​：对齐方式</h4><blockquote><p>单独设置当前项目的对齐方式，会覆盖容器中的 align-items 属性</p></blockquote><ul><li>​auto​：默认值，继承父元素</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> flex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 变量</title>
      <link href="/couneu/web/css/01_css_variable/"/>
      <url>/couneu/web/css/01_css_variable/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>CSS 变量定义名称必须要使用 <code>--</code> 作为开头，区分大小写通常使用短横线进行分割单词</p></blockquote><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><blockquote><p>全局变量可以在整个文档中进行访问&#x2F;使用，而局部变量只能在声明它的选择器内部使用。</p></blockquote><p>－ 局部作用域： 默认书写在选择器下的变量具有局部的作用域－ 全局作用域： 书写在 <code>:root</code> 选择器下的变量具有全局作用域</p><blockquote><p><code>:root</code> 会匹配文档的根元素</p></blockquote><h2 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span>(name, value)</span><br></pre></td></tr></table></figure><p><strong>描述：</strong> － <code>name</code>： 必需，变量名称－ <code>value</code>： 可选，当前变量的默认值（当找不到变量时默认使用）</p><h2 id="JS-修改变量"><a href="#JS-修改变量" class="headerlink" title="JS 修改变量"></a>JS 修改变量</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取根元素</span></span><br><span class="line"><span class="keyword">var</span> r = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;:root&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建获取变量值的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction_get</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// Get the styles (properties and values) for the root</span></span><br><span class="line"><span class="keyword">var</span> rs = <span class="title function_">getComputedStyle</span>(r);</span><br><span class="line"><span class="comment">// Alert the value of the --blue variable</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;The value of --blue is: &#x27;</span> + rs.<span class="title function_">getPropertyValue</span>(<span class="string">&#x27;--blue&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建设置变量值的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction_set</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// Set the value of variable --blue to another value (in this case &quot;lightblue&quot;)</span></span><br><span class="line">r.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&#x27;--blue&#x27;</span>, <span class="string">&#x27;lightblue&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> variable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GRID 布局</title>
      <link href="/couneu/web/css/04_css_grid/"/>
      <url>/couneu/web/css/04_css_grid/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​Grid​ 布局即网格布局，是一种新的 CSS​ 布局模型，比较擅长将一个页面划分为几个主要区域，以及定义这些区域的大小、位置、层次等关系</p></blockquote><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ul><li>容器：设置 display:grid;​ ​ 的元素称为 Grid 容器， 简称容器</li><li>项目：容器中的所有子元素自动成为容器的成员，称为 Grid 项目（grid item），简称”项目”</li><li>网格轨道<ul><li>行：容器内部的水平区域</li><li>列：容器内部的垂直区域</li></ul></li><li>网格单元：一个网格单元是在一个网格元素中最小的单位， 从概念上来讲其实它和表格的一个单元格很像</li><li>网格线：划分网格的线，称为”网格线”</li></ul><blockquote><p>Grid 会为我们创建编号的网格线来让我们来定位每一个网格元素。m 列有 m + 1 根垂直的网格线，n 行有 n + 1 跟水平网格线。</p></blockquote><h1 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h1><h2 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h2><h3 id="display​-：布局方式"><a href="#display​-：布局方式" class="headerlink" title="display​ ：布局方式"></a>display​ ：布局方式</h3><ul><li>​grid​： 容器是一个块级元素</li><li>​inline-grid​ ：容器元素为行内元素</li></ul><h3 id="grid-template-columns​：列宽"><a href="#grid-template-columns​：列宽" class="headerlink" title="grid-template-columns​：列宽"></a>grid-template-columns​：列宽</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  声明了三列，宽度分别为 200px 100px 200px */</span></span><br><span class="line"><span class="attribute">grid-template-columns</span>: <span class="number">200px</span> <span class="number">100px</span> <span class="number">200px</span>;</span><br></pre></td></tr></table></figure><h3 id="grid-template-rows​：行高"><a href="#grid-template-rows​：行高" class="headerlink" title="grid-template-rows​：行高"></a>grid-template-rows​：行高</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  声明了两行，行高分别为 50px 50px  */</span></span><br><span class="line"><span class="attribute">grid-template-rows</span>: <span class="number">50px</span> <span class="number">50px</span>;</span><br></pre></td></tr></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>repeat() 函数：可以简化重复的值。该函数接受两个参数，第一个参数是重复的次数，第二个参数是所要重复的值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  2行，而且行高都为 50px  */</span></span><br><span class="line"><span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">50px</span>);</span><br></pre></td></tr></table></figure><p>auto-fill 关键字：表示自动填充，让一行（或者一列）中尽可能的容纳更多的单元格。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 表示列宽是 200 px，但列的数量是不固定的，只要浏览器能够容纳得下，就可以放置元素 */</span></span><br><span class="line"><span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fill, <span class="number">200px</span>);</span><br></pre></td></tr></table></figure><p>fr 关键字：Grid​ 布局还引入了一个另外的长度单位来帮助我们创建灵活的网格轨道。fr​ 单位代表网格容器中可用空间的一等份</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 第一个列宽设置为 200px，后面剩余的宽度分为两部分，宽度分别为剩余宽度的 1/3 和 2/3。 */</span></span><br><span class="line"><span class="attribute">grid-template-columns</span>: <span class="number">200px</span> <span class="number">1</span>fr <span class="number">2</span>fr;</span><br></pre></td></tr></table></figure><p>minmax() 函数：我们有时候想给网格元素一个最小和最大的尺寸，minmax()​ 函数产生一个长度范围，表示长度就在这个范围之中都可以应用到网格项目中。<br>它接受两个参数，分别为最小值和最大值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 第三个列宽最少也是要 300px，但是最大不能大于第一第二列宽的两倍 */</span></span><br><span class="line"><span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="built_in">minmax</span>(<span class="number">300px</span>, <span class="number">2</span>fr);</span><br></pre></td></tr></table></figure><p>auto 关键字：由浏览器决定长度。通过 auto​ 关键字，我们可以轻易实现三列或者两列布局。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 第一第三列为 100px，中间由浏览器决定长度 */</span></span><br><span class="line"><span class="attribute">grid-template-columns</span>: <span class="number">100px</span> auto <span class="number">100px</span>;</span><br></pre></td></tr></table></figure><h3 id="grid-row-gap：行间距"><a href="#grid-row-gap：行间距" class="headerlink" title="grid-row-gap：行间距"></a>grid-row-gap：行间距</h3><p>​grid-row-gap: 10px​ 表示行间距是 10px</p><h3 id="grid-column-gap：列间距"><a href="#grid-column-gap：列间距" class="headerlink" title="grid-column-gap：列间距"></a>grid-column-gap：列间距</h3><p>​grid-column-gap: 20px​ 表示列间距是 20px</p><h3 id="grid-gap-：复合属性"><a href="#grid-gap-：复合属性" class="headerlink" title="grid-gap ：复合属性"></a>grid-gap ：复合属性</h3><p>​grid-gap: 10px 20px​</p><h3 id="grid-template-areas​：定义区域"><a href="#grid-template-areas​：定义区域" class="headerlink" title="grid-template-areas​：定义区域"></a>grid-template-areas​：定义区域</h3><blockquote><p>​grid-template-areas​ 属性用于定义区域，一个区域由一个或者多个单元格组成</p><p>一般这个属性跟网格元素的 grid-area​ 一起使用</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line"><span class="attribute">grid-template-areas</span>:</span><br><span class="line"><span class="string">&#x27;. header  header&#x27;</span></span><br><span class="line"><span class="string">&#x27;sidebar content content&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line"><span class="attribute">grid-area</span>: sidebar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="grid-auto-flow​：-自动布局算法"><a href="#grid-auto-flow​：-自动布局算法" class="headerlink" title="grid-auto-flow​： 自动布局算法"></a>grid-auto-flow​： 自动布局算法</h3><blockquote><p>​grid-auto-flow​ 属性控制着自动布局算法怎样运作，精确指定在网格中被自动布局的元素怎样排列</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 先行后列 */</span></span><br><span class="line"><span class="attribute">grid-auto-flow</span>: row;</span><br><span class="line"><span class="comment">/* 尽可能填满表格,尽量不留下空白 */</span></span><br><span class="line"><span class="attribute">grid-auto-flow</span>: row dense;</span><br></pre></td></tr></table></figure><h3 id="justify-items：水平位置"><a href="#justify-items：水平位置" class="headerlink" title="justify-items：水平位置"></a>justify-items：水平位置</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line"><span class="attribute">justify-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>start - 对齐容器的起始边框</li><li>end - 对齐容器的结束边框</li><li>center - 容器内部居中</li><li>space-around - 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍</li><li>space-between - 项目与项目的间隔相等，项目与容器边框之间没有间隔</li><li>space-evenly - 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔</li><li>stretch - 项目大小没有指定时，拉伸占据整个网格容器</li></ul><h3 id="align-items：垂直位置"><a href="#align-items：垂直位置" class="headerlink" title="align-items：垂直位置"></a>align-items：垂直位置</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line"><span class="attribute">align-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="place-items-复合属性"><a href="#place-items-复合属性" class="headerlink" title="place-items 复合属性"></a>place-items 复合属性</h3><h3 id="grid-auto-columns、grid-auto-rows"><a href="#grid-auto-columns、grid-auto-rows" class="headerlink" title="grid-auto-columns、grid-auto-rows"></a>grid-auto-columns、grid-auto-rows</h3><blockquote><p>隐式和显示网格：显式网格包含了你在 grid-template-columns​ 和 grid-template-rows​ 属性中定义的行和列。如果你在网格定义之外又放了一些东西，<br>或者因为内容的数量而需要的更多网格轨道的时候，网格将会在隐式网格中创建行和列</p></blockquote><p>假如有多余的网格（也就是上面提到的隐式网格），那么它的行高和列宽可以根据 grid-auto-columns​ 属性和 grid-auto-rows​ 属性设置。它们的写法和<br>grid-template-columns​ 和 grid-template-rows​ 完全相同。如果不指定这两个属性，浏览器完全根据单元格内容的大小，决定新增网格的列宽和行高</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: grid;</span><br><span class="line"><span class="attribute">grid-template-columns</span>: <span class="number">200px</span> <span class="number">100px</span>;</span><br><span class="line"><span class="comment">/*  只设置了两行，但实际的数量会超出两行，超出的行高会以 grid-auto-rows 算 */</span></span><br><span class="line"><span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h2><h3 id="grid-column-start、grid-column-end-、grid-row-start、grid-row-end"><a href="#grid-column-start、grid-column-end-、grid-row-start、grid-row-end" class="headerlink" title="grid-column-start、grid-column-end 、grid-row-start、grid-row-end"></a>grid-column-start、grid-column-end 、grid-row-start、grid-row-end</h3><ul><li>grid-column-start 属性：左边框所在的垂直网格线</li><li>grid-column-end 属性：右边框所在的垂直网格线</li><li>grid-row-start 属性：上边框所在的水平网格线</li><li>grid-row-end 属性：下边框所在的水平网格线</li></ul><h3 id="grid-area"><a href="#grid-area" class="headerlink" title="grid-area"></a>grid-area</h3><blockquote><p>grid-area​ 属性指定项目放在哪一个区域，配合 grid-template-areas​</p></blockquote><h3 id="justify-self-、align-self、-place-self"><a href="#justify-self-、align-self、-place-self" class="headerlink" title="justify-self 、align-self、 place-self"></a>justify-self 、align-self、 place-self</h3><p>​justify-self​ 属性设置单元格内容的水平位置，同 justify-items​ 属性</p><p>​align-self​ 属性设置单元格内容的垂直位置，同 align-items​ 属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line"><span class="attribute">justify-self</span>: start | end | center | stretch;</span><br><span class="line"><span class="attribute">align-self</span>: start | end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> grid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESTAPI 请求</title>
      <link href="/couneu/web/html/02_RESTAPI/"/>
      <url>/couneu/web/html/02_RESTAPI/</url>
      
        <content type="html"><![CDATA[<h2 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h2><blockquote><p>GET 请求： 用于从指定资源请求数据，将数据插入到 url 末尾</p></blockquote><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/test/demo_form.<span class="property">php</span>?name1=value1&amp;name2=value2</span><br></pre></td></tr></table></figure><h3 id="GET-请求的其他一些注释："><a href="#GET-请求的其他一些注释：" class="headerlink" title="GET 请求的其他一些注释："></a>GET 请求的其他一些注释：</h3><ul><li>GET 请求可被缓存</li><li>GET 请求保留在浏览器历史记录中</li><li>GET 请求可被收藏为书签</li><li>GET 请求不应在处理敏感数据时使用</li><li>GET 请求有长度限制</li><li>GET 请求只应当用于取回数据（不修改）</li></ul><h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><blockquote><p>POST 用于将数据发送到服务器来创建&#x2F;更新资源。</p></blockquote><blockquote><p>通过 POST 发送到服务器的数据存储在 HTTP 请求的请求主体中</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">POST</span> /test/demo_form.<span class="property">php</span> <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Host</span>: w3school.<span class="property">com</span>.<span class="property">cn</span></span><br><span class="line">name1=value1&amp;name2=value2</span><br></pre></td></tr></table></figure><blockquote><p>POST 是最常见的 HTTP 方法之一。</p></blockquote><h3 id="POST-请求的其他一些注释："><a href="#POST-请求的其他一些注释：" class="headerlink" title="POST 请求的其他一些注释："></a>POST 请求的其他一些注释：</h3><ul><li>POST 请求不会被缓存</li><li>POST 请求不会保留在浏览器历史记录中</li><li>POST 不能被收藏为书签</li><li>POST 请求对数据长度没有要求</li></ul><h2 id="PUT-方法"><a href="#PUT-方法" class="headerlink" title="PUT 方法"></a>PUT 方法</h2><blockquote><p>PUT 用于将数据发送到服务器来创建&#x2F;更新资源。</p></blockquote><blockquote><p>POST 和 PUT 之间的区别在于 PUT 请求是幂等的（idempotent）。也就是说，多次调用相同的 PUT 请求将始终产生相同的结果。相反，重复调用 POST 请求<br>具有多次创建相同资源的副作用。</p></blockquote><h2 id="HEAD-方法"><a href="#HEAD-方法" class="headerlink" title="HEAD 方法"></a>HEAD 方法</h2><blockquote><p>HEAD 与 GET 几乎相同，但没有响应主体。</p></blockquote><blockquote><p>如果 GET &#x2F;users 返回用户列表，那么 HEAD &#x2F;users 将发出相同的请求，但不会返回用户列表。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> HTML </tag>
            
            <tag> RESTAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 常用状态码</title>
      <link href="/couneu/web/html/01_html_status/"/>
      <url>/couneu/web/html/01_html_status/</url>
      
        <content type="html"><![CDATA[<h2 id="1xx-信息"><a href="#1xx-信息" class="headerlink" title="1xx: 信息"></a>1xx: 信息</h2><table><thead><tr><th>消息</th><th>描述</th></tr></thead><tbody><tr><td>100 Continue</td><td>服务器仅接收到部分请求，但是一旦服务器并没有拒绝该请求，客户端应该继续发送其余的请求。</td></tr><tr><td>101 Switching Protocols</td><td>服务器转换协议：服务器将遵从客户的请求转换到另外一种协议。</td></tr><tr><td>102 Processing</td><td>服务器已收到并正在处理该请求，但当前没有响应可用</td></tr><tr><td>103 Early Hints</td><td>用于与  <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Link"><code>Link</code></a>  链接头一起使用，以允许用户代理在服务器准备响应阶段时开始预加载  <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes/rel/preload">preloading</a>  资源。</td></tr></tbody></table><h2 id="2xx-成功"><a href="#2xx-成功" class="headerlink" title="2xx: 成功"></a>2xx: 成功</h2><table><thead><tr><th>消息:</th><th>描述:</th></tr></thead><tbody><tr><td>200 OK</td><td>请求成功（其后是对 GET 和 POST 请求的应答文档。）</td></tr><tr><td>201 Created</td><td>请求被创建完成，同时新的资源被创建。</td></tr><tr><td>202 Accepted</td><td>供处理的请求已被接受，但是处理未完成。</td></tr><tr><td>203 Non-authoritative Information</td><td>文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝。</td></tr><tr><td>204 No Content</td><td>没有新文档。浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而 Servlet 可以确定用户文档足够新，这个状态代码是很有用的。</td></tr><tr><td>205 Reset Content</td><td>没有新文档。但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容。</td></tr><tr><td>206 Partial Content</td><td>客户发送了一个带有 Range 头的 GET 请求，服务器完成了它。</td></tr><tr><td>207 Multi-Status</td><td>对于多个状态代码都可能合适的情况，传输有关多个资源的信息。</td></tr></tbody></table><h2 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx: 重定向"></a>3xx: 重定向</h2><table><thead><tr><th>消息:</th><th>描述:</th></tr></thead><tbody><tr><td>300 Multiple Choices</td><td>多重选择。链接列表。用户可以选择某链接到达目的地。最多允许五个地址。</td></tr><tr><td>301 Moved Permanently</td><td>所请求的页面已经转移至新的 url。</td></tr><tr><td>302 Found</td><td>所请求的页面已经临时转移至新的 url。</td></tr><tr><td>303 See Other</td><td>所请求的页面可在别的 url 下被找到。</td></tr><tr><td>304 Not Modified</td><td>未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供 If-Modified-Since 头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。</td></tr><tr><td>305 Use Proxy</td><td>客户请求的文档应该通过 Location 头所指明的代理服务器提取。</td></tr><tr><td>306 Unused</td><td>此代码被用于前一版本。目前已不再使用，但是代码依然被保留。</td></tr><tr><td>307 Temporary Redirect</td><td>被请求的页面已经临时移至新的 url。</td></tr></tbody></table><h2 id="4xx-客户端错误"><a href="#4xx-客户端错误" class="headerlink" title="4xx: 客户端错误"></a>4xx: 客户端错误</h2><table><thead><tr><th>消息:</th><th>描述:</th></tr></thead><tbody><tr><td>400 Bad Request</td><td>服务器未能理解请求。</td></tr><tr><td>401 Unauthorized</td><td>被请求的页面需要用户名和密码。</td></tr><tr><td>402 Payment Required</td><td>此代码尚无法使用。</td></tr><tr><td>403 Forbidden</td><td>对被请求页面的访问被禁止。</td></tr><tr><td>404 Not Found</td><td>服务器无法找到被请求的页面。</td></tr><tr><td>405 Method Not Allowed</td><td>请求中指定的方法不被允许。</td></tr><tr><td>406 Not Acceptable</td><td>服务器生成的响应无法被客户端所接受。</td></tr><tr><td>407 Proxy Authentication Required</td><td>用户必须首先使用代理服务器进行验证，这样请求才会被处理。</td></tr><tr><td>408 Request Timeout</td><td>请求超出了服务器的等待时间。</td></tr><tr><td>409 Conflict</td><td>由于冲突，请求无法被完成。</td></tr><tr><td>410 Gone</td><td>被请求的页面不可用。</td></tr><tr><td>411 Length Required</td><td>“Content-Length” 未被定义。如果无此内容，服务器不会接受请求。</td></tr><tr><td>412 Precondition Failed</td><td>请求中的前提条件被服务器评估为失败。</td></tr><tr><td>413 Request Entity Too Large</td><td>由于所请求的实体的太大，服务器不会接受请求。</td></tr><tr><td>414 Request-url Too Long</td><td>由于 url 太长，服务器不会接受请求。当 post 请求被转换为带有很长的查询信息的 get 请求时，就会发生这种情况。</td></tr><tr><td>415 Unsupported Media Type</td><td>由于媒介类型不被支持，服务器不会接受请求。</td></tr><tr><td>416</td><td>服务器不能满足客户在请求中指定的 Range 头。</td></tr><tr><td>417 Expectation Failed</td><td></td></tr></tbody></table><h2 id="5xx-服务器错误"><a href="#5xx-服务器错误" class="headerlink" title="5xx: 服务器错误"></a>5xx: 服务器错误</h2><table><thead><tr><th>消息:</th><th>描述:</th><th></th></tr></thead><tbody><tr><td>500 Internal Server Error</td><td>请求未完成。服务器遇到不可预知的情况。</td><td></td></tr><tr><td>501 Not Implemented</td><td>请求未完成。服务器不支持所请求的功能。</td><td></td></tr><tr><td>502 Bad Gateway</td><td>请求未完成。服务器从上游服务器收到一个无效的响应。</td><td></td></tr><tr><td>503 Service Unavailable</td><td>请求未完成。服务器临时过载或当机。</td><td></td></tr><tr><td>504 Gateway Timeout</td><td>网关超时。</td><td></td></tr><tr><td>505 HTTP Version Not Supported</td><td>服务器不支持请求中指明的 HTTP 协议版本。</td><td></td></tr></tbody></table><h2 id="双层状态码嵌套"><a href="#双层状态码嵌套" class="headerlink" title="双层状态码嵌套"></a>双层状态码嵌套</h2>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> HTML </tag>
            
            <tag> 状态码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/couneu/hello-world/"/>
      <url>/couneu/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get<br>any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on<br><a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p><img src="/couneu/images/post/defaults/defaults_cover_1.jpg"></p><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
